version: '3.8'
services:
  postgres:
    image: postgres:14.5-alpine
    environment:
      POSTGRES_DB: posthog
      POSTGRES_USER: posthog
      POSTGRES_PASSWORD: secret
    volumes:
      - ./volumes/postgres/:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD", "sh", "-c", "pg_isready -U $$POSTGRES_USER -h $$(hostname -i)"]
      interval: 10s
      start_period: 30s

  redis:
    image: redis:6.2.7-alpine
    restart: on-failure
    ports:
        - '6379:6379'
    command: redis-server --maxmemory-policy allkeys-lru --maxmemory 200mb
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      start_period: 30s

  clickhouse:
    build: ./clickhouse-posthog/
    restart: on-failure
    depends_on:
      - kafka
      - zookeeper
    volumes:
      - ./volumes/clickhouse/:/var/lib/clickhouse/
    healthcheck:
      test: wget --no-verbose --tries=1 --spider localhost:8123/ping || exit 1
      interval: 2s
      timeout: 2s
      retries: 16

  zookeeper:
    image: zookeeper:3.7.0
    restart: on-failure
    volumes:
      - ./volumes/zookeeper/data/:/data/
      - ./volumes/zookeeper/datalog/:/datalog/
      - ./volumes/zookeeper/logs/:/logs/

  kafka:
    image: bitnami/kafka:2.8.1-debian-10-r99
    restart: on-failure
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1001
      KAFKA_CFG_RESERVED_BROKER_MAX_ID: 1001
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: 'true'

  worker: &worker
    image: posthog/posthog:release-1.40.0
    command: ./bin/docker-worker-celery --with-scheduler
    restart: on-failure
    environment:
      SENTRY_DSN: $SENTRY_DSN
      SITE_URL: https://$DOMAIN
      DISABLE_SECURE_SSL_REDIRECT: 'true'
      IS_BEHIND_PROXY: 'true'
      TRUST_ALL_PROXIES: 'true'
      DATABASE_URL: 'postgres://posthog:secret@postgres:5432/posthog'
      CLICKHOUSE_HOST: 'clickhouse'
      CLICKHOUSE_DATABASE: 'posthog'
      CLICKHOUSE_SECURE: 'false'
      CLICKHOUSE_VERIFY: 'false'
      KAFKA_URL: 'kafka://kafka'
      REDIS_URL: 'redis://redis:6379/'
      SECRET_KEY: secret
      PGHOST: postgres
      PGUSER: posthog
      PGPASSWORD: posthog
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    links:
      - postgres:postgres
      - redis:redis
      - clickhouse:clickhouse
      - kafka:kafka

  web:
    <<: *worker
    command: sh -c "./bin/docker-server && ./bin/docker-frontend"
    restart: on-failure
    ports:
      - '8000:8000'
      - '8234:8234'

  plugins:
    image: posthog/posthog:release-1.32.0
    command: ./bin/plugin-server --no-restart-loop
    restart: on-failure
    environment:
      DATABASE_URL: 'postgres://posthog:secret@postgres:5432/posthog'
      KAFKA_HOSTS: 'kafka:9092'
      REDIS_URL: 'redis://redis:6379/'
      CLICKHOUSE_HOST: 'clickhouse'
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    links:
      - postgres:postgres
      - redis:redis
      - clickhouse:clickhouse
      - kafka:kafka

  object_storage:
    image: minio/minio:RELEASE.2022-09-17T00-09-45Z.fips
    restart: on-failure
    volumes:
      - ./volumes/object_storage/:/data
    environment:
      MINIO_ROOT_USER: posthog
      MINIO_ROOT_PASSWORD: secret
    entrypoint: sh
    command: -c 'mkdir -p /data/posthog && minio server --address ":19000" --console-address ":19001" /data' # create the 'posthog' bucket before starting the service

  asyncmigrationscheck:
    <<: *worker
    command: python manage.py run_async_migrations --check
    restart: 'no'
    scale: 0
